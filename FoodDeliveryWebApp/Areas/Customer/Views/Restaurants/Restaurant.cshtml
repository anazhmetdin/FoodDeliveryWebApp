@model List<FoodDeliveryWebApp.ViewModels.ProductViewModel>

@{
    ViewData["Title"] = "Restaurant";
}

<h1>Restaurant</h1>

<div class="container">
    @{
        for (int i = 0; i < Model.Count; i += 3)
        {
            <div class="row row-cols-1 row-cols-md-3 g-4 m-3">
                @{
                    for (int j = i; j < i + 3; j++)
                    {
                        if (j == Model.Count) break;

                        <div class="col">
                            <div class="card accordion-body">
                                <img src="@Model[j].Image">
                                <div class="card-body">
                                    <h5 class="card-title">@Model[j].Name</h5>
                                    <p class="card-text text-truncate">@Model[j].Description</p>
                                    <p class="card-text">@string.Format("{0:C}", Model[j].Price)</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <label id="count-@Model[j].Id" class="badge cart-count text-dark fs-4">0</label>
                                        </div>
                                        <div>
                                            <button product-id="@Model[j].Id" type="button" class="add-to-cart btn fs-4 btn-primary">+</button>
                                            <button product-id="@Model[j].Id" type="button" class="remove-from-cart btn fs-4 btn-secondary">–</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    }
</div>

<div class="row-cols-1">
    <button id="submit" class="btn btn-success col-12">Checkout</button>
</div>
@section Scripts{

    <script>
        // Get all the "Add to cart" and "Remove from cart" buttons
        const addToCartButtons = document.querySelectorAll('.add-to-cart');
        const removeFromCartButtons = document.querySelectorAll('.remove-from-cart');

        // Add event listeners to each button
        addToCartButtons.forEach(button => {
            button.addEventListener('click', event => {
                // Get the product ID and current count from the label
                const productId = $(event.target).attr('product-id');
                const countLabel = document.querySelector(`#count-${productId}`);
                let count = parseInt(countLabel.textContent)

                // Increment the count and update the label
                count++;
                countLabel.textContent = count;

                // Get the user's cart object from session storage
                let cart = sessionStorage.getItem('cart');
                if (cart) {
                    cart = JSON.parse(cart);
                } else {
                    cart = {};
                }

                // Add the current product and count to the cart object
                cart[productId] = count;

                // Save the cart object back to session storage
                sessionStorage.setItem('cart', JSON.stringify(cart));
            });
        });

        removeFromCartButtons.forEach(button => {
            button.addEventListener('click', event => {
                // Get the product ID and current count from the label
                const productId = $(event.target).attr('product-id');
                const countLabel = document.querySelector(`#count-${productId}`);
                let count = parseInt(countLabel.textContent);

                // Decrement the count (if it's greater than zero) and update the label
                if (count > 0) {
                    count--;
                    countLabel.textContent = count;

                    // Get the user's cart object from session storage
                    let cart = sessionStorage.getItem('cart');
                    if (cart) {
                        cart = JSON.parse(cart);
                    } else {
                        cart = {};
                    }

                    // Remove the current product from the cart object (if it exists)
                    delete cart[productId];

                    // Save the cart object back to session storage
                    sessionStorage.setItem('cart', JSON.stringify(cart));
                }
            });
        });

        document.getElementById("submit").addEventListener('click', event => {
            var sessionData = [];
            var cart = JSON.parse(sessionStorage.getItem('cart'));
            for (key in cart) {
                sessionData.push({
                    Id: Number(key),
                    Count: cart[key]
                });
            }
            var jsonData = JSON.stringify(sessionData);

            console.log(jsonData);

            $.ajax({
                url: '/Customer/Restaurants/Checkout',
                type: 'POST',
                data: jsonData,
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    window.location.href = "https://localhost:7233/" + "@Url.Action("Checkout", "Restaurants", new { Area = "Customer" })"
                },
                error: function (xhr, status, error) {
                    console.log('Error:', error);
                }
            });
        });
    </script>
}

